import React, { useEffect, useState } from "react";
import { Direction, GameState, isCompleted, movePlayer } from "./core";
import { defaultLevels } from "./levels";
import { Helper } from "./Helper";
import { GameField } from "./GameField";
import { useTouchControls } from "./useTouchControls";
import { Level } from "./LevelEditor";
console.log("ðŸš€ ~ file: Game.tsx:4 ~ defaultLevels", defaultLevels)

const FIRST_LEVEL = 0;

type GameProps = {
  levels?: Level[];
  firstLevel?: number;
};

const Game: React.FC<GameProps> = ({
  levels = defaultLevels,
  firstLevel = FIRST_LEVEL
}) => {
  const [gameState, setGameState] = useState(levels[firstLevel].level);
  const [history, setHistory] = useState<GameState[]>([levels[firstLevel].level]);
  const [currentLevel, setCurrentLevel] = useState(firstLevel);

  const handleUndo = () => {
    if (history.length > 1) {
      const newHistory = [...history];
      const prevGameState = newHistory.pop();
      setHistory(newHistory);
      if (prevGameState) setGameState({...prevGameState});
    }
  };

  const isLevelCompleted = () => isCompleted(gameState);

  const isGameWon = () => {
    return currentLevel === levels.length - 1 && isLevelCompleted();
  };

  const handleNextLevel = () => {
    if (isLevelCompleted() && !isGameWon()) {
      setHistory([...history, levels[currentLevel + 1].level]);
      setCurrentLevel(currentLevel + 1);
      setGameState(levels[currentLevel + 1].level);
    }
  };

  const makeMove = (direction: Direction) => {
    const newGameState = movePlayer(gameState, direction)
    setHistory(prevHistory => ([...prevHistory, gameState ]));
    setGameState(newGameState);
  }

  const { handleTouchMove, handleTouchStart } = useTouchControls(makeMove);

  function handleKeyDown(event: KeyboardEvent) {
    let direction: Direction
    switch (event.key) {
      case "ArrowUp":
        direction = Direction.Up;
        break;
      case "ArrowDown":
        direction = Direction.Down;
        break;
      case "ArrowLeft":
        direction = Direction.Left;
        break;
      case "ArrowRight":
        direction = Direction.Right;
        break;
      case "r":
        return handlePlayAgain();
      case "n":
        if (isLevelCompleted() && !isGameWon()) {
          setHistory([...history, levels[currentLevel + 1].level]);
          setCurrentLevel(currentLevel + 1);
          setGameState(levels[currentLevel + 1].level);
        }
        return;
        break;
      case "z":
        return handleUndo();
      default:
        return;
    }

    makeMove(direction);
  }

  function handlePlayAgain() {
    if (isGameWon()) {
      setCurrentLevel(firstLevel);
      setHistory([levels[firstLevel].level]);
      setGameState(levels[firstLevel].level);
    } else {
      setHistory([...history, gameState]);
      setGameState(levels[currentLevel].level);
    }
  }

  useEffect(() => {
    window.addEventListener("keydown", handleKeyDown);
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
    };
  }, [gameState]);

  return (
    <div>
      <h1>Sokoban Game (Mostly generated by ChatGPT)</h1>
      <h2>{levels[currentLevel].name}</h2>
      <GameField
        gameState={gameState}
        onTouchMove={handleTouchMove}
        onTouchStart={handleTouchStart}
      />
      <div className="controls">
        <button onClick={handleUndo}>Undo</button>
        <button onClick={handleNextLevel}>Next Level</button>
      </div>
      <div className="info">
        <p>
          Level: {currentLevel + 1} / {levels.length}
        </p>
        <p>
          {isGameWon()
            ? "You won!"
            : isLevelCompleted()
            ? "Level completed!"
            : ""}
        </p>
      </div>
      <Helper />
      <style>
        {`
            .controls {
                display: flex;
                justify-content: space-between;
                margin: 10px;
                width: 200px;
            }
            .info {
                margin: 10px;
            }
            `}
      </style>
    </div>
  );
};

export default Game;
